package Quiz;


/**
* Quiz/QuizServerPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from ../Quiz.idl
* Freitag, 11. Oktober 2013 17:49 Uhr MESZ
*/


/*
	 * Interface for the quiz server object. This interface provides all
	 * methods, that can used by clients to play the game.
	 */
public abstract class QuizServerPOA extends org.omg.PortableServer.Servant
 implements Quiz.QuizServerOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("getQuestion", new java.lang.Integer (0));
    _methods.put ("insertQuestion", new java.lang.Integer (1));
    _methods.put ("answerQuestion", new java.lang.Integer (2));
    _methods.put ("deleteQuestion", new java.lang.Integer (3));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {

  /*
  		 * Returns a random question to the client. Note: return just a
  		 * question without the correct answers, that means return no
  		 * complete question.
  		 */
       case 0:  // Quiz/QuizServer/getQuestion
       {
         try {
           Quiz.QuestionHolder randomQuestion = new Quiz.QuestionHolder ();
           boolean $result = false;
           $result = this.getQuestion (randomQuestion);
           out = $rh.createReply();
           out.write_boolean ($result);
           Quiz.QuestionHelper.write (out, randomQuestion.value);
         } catch (Quiz.QuizServerPackage.QuizException $ex) {
           out = $rh.createExceptionReply ();
           Quiz.QuizServerPackage.QuizExceptionHelper.write (out, $ex);
         }
         break;
       }


  /*
  		 * Method for creating a new question on the server object. The
  		 * CompleteQuestion object is created on the client and sent to the
  		 * server by using this method. The server saves this question.
  		 *
  		 * The method returns the ID of the create question.
  		 */
       case 1:  // Quiz/QuizServer/insertQuestion
       {
         try {
           Quiz.CompleteQuestion question = Quiz.CompleteQuestionHelper.read (in);
           int $result = (int)0;
           $result = this.insertQuestion (question);
           out = $rh.createReply();
           out.write_long ($result);
         } catch (Quiz.QuizServerPackage.QuizException $ex) {
           out = $rh.createExceptionReply ();
           Quiz.QuizServerPackage.QuizExceptionHelper.write (out, $ex);
         }
         break;
       }


  /*
  		 * Method for answering a question with a given question ID. The server
  		 * will check the answers and return true or false. The correct answers
  		 * should be written in the out correct parameters.
  		 */
       case 2:  // Quiz/QuizServer/answerQuestion
       {
         try {
           int questionId = in.read_long ();
           char answer[] = Quiz.QuizServerPackage.answersIdsHelper.read (in);
           Quiz.QuizServerPackage.answersIdsHolder correct = new Quiz.QuizServerPackage.answersIdsHolder ();
           boolean $result = false;
           $result = this.answerQuestion (questionId, answer, correct);
           out = $rh.createReply();
           out.write_boolean ($result);
           Quiz.QuizServerPackage.answersIdsHelper.write (out, correct.value);
         } catch (Quiz.QuizServerPackage.QuizException $ex) {
           out = $rh.createExceptionReply ();
           Quiz.QuizServerPackage.QuizExceptionHelper.write (out, $ex);
         }
         break;
       }


  /*
  		 * Deletes the question with the given ID.
  		 */
       case 3:  // Quiz/QuizServer/deleteQuestion
       {
         try {
           int questionId = in.read_long ();
           int $result = (int)0;
           $result = this.deleteQuestion (questionId);
           out = $rh.createReply();
           out.write_long ($result);
         } catch (Quiz.QuizServerPackage.QuizException $ex) {
           out = $rh.createExceptionReply ();
           Quiz.QuizServerPackage.QuizExceptionHelper.write (out, $ex);
         }
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:Quiz/QuizServer:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public QuizServer _this() 
  {
    return QuizServerHelper.narrow(
    super._this_object());
  }

  public QuizServer _this(org.omg.CORBA.ORB orb) 
  {
    return QuizServerHelper.narrow(
    super._this_object(orb));
  }


} // class QuizServerPOA
